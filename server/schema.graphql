scalar Date
scalar JWT

type User {
	_id: ID
	username: String
	firstName: String
	lastName: String
	createdAt: Date
	lastActivity: Date
	patients: [Patient]
	role: String
}

input UserInput {
	username: String
	firstName: String
	lastName: String
	password: String
	oldPassword: String
}

input RegisterUser {
	username: String!
	firstName: String!
	lastName: String!
	password: String!
}

type Patient {
	_id: ID
	firstName: String
	lastName: String
	gender: String
	patientNumber: String
	NHSnumber: String
	dateOfBirth: Date
	createdAt: Date
	lastUpdated: Date
	appointments: [Appointment]
	graphData: [graphSeries]
}

input PatientInput {
	_id: String
	firstName: String
	lastName: String
	gender: String
	patientNumber: String
	NHSnumber: String
	dateOfBirth: Date
	createdAt: Date
	lastUpdated: Date
	appointments: [AppointmentInput]
}

type graphSeries {
	key: String
	values: [Coordinates]
}

type Coordinates {
	x: Date
	y: Float
}

type Appointment {
	_id: ID
	clinicDate: Date
	weight: Float
	alsfrs: ALSFRS
	ess: ESS
	fvc: FVC
	snp: Int
	spO2: Int
	abg: ABG
}

input AppointmentInput {
	_id: String
	clinicDate: Date
	weight: Float
	alsfrs: ALSFRSInput
	ess: ESSInput
	fvc: FVCInput
	snp: Int
	spO2: Int
	abg: ABGInput
}

type ALSFRS {
	speech: Int
	salivation: Int
	swallowing: Int
	handwriting: Int
	cutting: Int
	dressing: Int
	turning: Int
	walking: Int
	climbing: Int
	dyspnea: Int
	orthopnea: Int
	respiratory: Int
	total: Int
}

input ALSFRSInput {
	speech: Int
	salivation: Int
	swallowing: Int
	handwriting: Int
	cutting: Int
	dressing: Int
	turning: Int
	walking: Int
	climbing: Int
	dyspnea: Int
	orthopnea: Int
	respiratory: Int
	total: Int
}

type ESS {
	sittingAndReading: Int
	watching: Int
	sittingInactive: Int
	carPassenger: Int
	lyingDown: Int
	sittingAndTalking: Int
	sittingAfterLunch: Int
	carTraffic: Int
	total: Int
}

input ESSInput {
	sittingAndReading: Int
	watching: Int
	sittingInactive: Int
	carPassenger: Int
	lyingDown: Int
	sittingAndTalking: Int
	sittingAfterLunch: Int
	carTraffic: Int
	total: Int
}

type FVC {
	sitting: Int
	supine: Int
}

input FVCInput {
	sitting: Int
	supine: Int
}

type ABG {
	pH: Float
	pO2: Float
	pCO2: Float
	HCO3: Float
	be: Float
}

input ABGInput {
	pH: Float
	pO2: Int
	pCO2: Int
	HCO3: Float
	be: Float
}

type Query {
	restricted(token: String!): RestrictedQuery
	usernameAvailable(username: String!): Boolean
}

type RestrictedQuery {
	user: User
	patient(_id: String!): Patient
	patients(search:String): [Patient]
}

type Mutation {
	registerUser(data: RegisterUser!): JWT
	activateUser(_id: String!): JWT
	loginUser(username: String! password: String! days: Int!): JWT

	restricted(token: String!): RestrictedMutation
}

type RestrictedMutation {
	resetPasswordPrep(username: String!): String
	resetPassword(username: String! key: String! password: String!): String
	updateUser(_id: String data: UserInput!): JWT

	createPatient(patient: PatientInput!): Patient
	updatePatient(patient: PatientInput!): Patient
	deletePatient(_id: String!): Patient
	addAppointment(patientId: String! appointment: AppointmentInput!): Patient
	updateAppointment(appointment: AppointmentInput!): Patient
	deleteAppointment(appointmentId: String!): Patient
}

schema {
	query: Query
	mutation: Mutation
}
